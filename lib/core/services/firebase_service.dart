// lib/core/services/firebase_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:revboostapp/firebase_options.dart'; // Auto-generated by FlutterFire CLI

class FirebaseService {
  // Singleton pattern
  static final FirebaseService _instance = FirebaseService._internal();
  
  factory FirebaseService() => _instance;
  
  FirebaseService._internal();
  
  // Firebase instances as nullable types
  FirebaseAuth? _auth;
  FirebaseFirestore? _firestore;
  FirebaseStorage? _storage;
  
  // Getters with null checks
  FirebaseAuth get auth => 
      _auth ?? (throw Exception('Firebase Auth not initialized. Call FirebaseService.initialize() first.'));
  
  FirebaseFirestore get firestore => 
      _firestore ?? (throw Exception('Firestore not initialized. Call FirebaseService.initialize() first.'));
  
  FirebaseStorage get storage => 
      _storage ?? (throw Exception('Firebase Storage not initialized. Call FirebaseService.initialize() first.'));
  
  bool _initialized = false;
  bool get isInitialized => _initialized;
  
  // Initialize Firebase
  static Future<void> initialize() async {
    if (_instance._initialized) {
      debugPrint('Firebase already initialized, skipping initialization');
      return;
    }
    
    try {
      // Use the auto-generated configuration
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      
      // Initialize service instances
      _instance._auth = FirebaseAuth.instance;
      _instance._firestore = FirebaseFirestore.instance;
      _instance._storage = FirebaseStorage.instance;
      
      // Optional: Configure Firestore settings
      _instance._firestore!.settings = const Settings(
        persistenceEnabled: true,
        cacheSizeBytes: Settings.CACHE_SIZE_UNLIMITED,
      );
      
      _instance._initialized = true;
      debugPrint('Firebase initialized successfully');
    } catch (e) {
      debugPrint('Error initializing Firebase: $e');
      rethrow;
    }
  }
  
  // Helper method for storage file uploads
  Future<String> uploadFile(String path, Uint8List data, {String? contentType}) async {
    final ref = storage.ref(path);
    
    final metadata = contentType != null
        ? SettableMetadata(contentType: contentType)
        : null;
    
    await ref.putData(data, metadata);
    return await ref.getDownloadURL();
  }
  
  // Helper method for deleting storage files
  Future<void> deleteFile(String path) async {
    await storage.ref(path).delete();
  }

}